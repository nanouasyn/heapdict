from typing import (
    TypeVar,
    MutableMapping,
    overload,
    Iterable,
    Iterator,
    Mapping,
    Callable,
)

K = TypeVar("K")
P = TypeVar("P")
D = TypeVar("D")

class HeapDict(MutableMapping[K, P]):
    _priorities: dict[K, P]
    _heap: list[K]
    _indexes: dict[K, int]

    # creation
    @overload
    def __init__(self, **kwargs: P) -> None: ...
    @overload
    def __init__(self, iterable: Iterable, /, **kwargs) -> None: ...
    @classmethod
    def fromkeys(cls, iterable: Iterable, value: P, /) -> HeapDict[K, P]: ...

    # priority heap methods
    @overload
    def min_item(self) -> tuple[K, P]: ...
    @overload
    def min_item(self, *, default: D) -> tuple[K, P] | D: ...
    @overload
    def pop_min_item(self) -> tuple[K, P]: ...
    @overload
    def pop_min_item(self, *, default: D) -> tuple[K, P] | D: ...
    @overload
    def max_item(self) -> tuple[K, P]: ...
    @overload
    def max_item(self, *, default: D) -> tuple[K, P] | D: ...
    @overload
    def pop_max_item(self) -> tuple[K, P]: ...
    @overload
    def pop_max_item(self, *, default: D) -> tuple[K, P] | D: ...

    # dict methods
    def __len__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __getitem__(self, key: K) -> P: ...
    def __setitem__(self, key: K, priority: P) -> None: ...
    def __delitem__(self, key: K) -> None: ...
    def __iter__(self) -> Iterator[K]: ...
    def __reversed__(self) -> Iterator[K]: ...
    def __or__(self, other: Mapping[K, P]) -> HeapDict[K, P]: ...
    def __ror__(self, other: Mapping[K, P]) -> HeapDict[K, P]: ...
    def __copy__(self) -> HeapDict[K, P]: ...
    def copy(self) -> HeapDict[K, P]: ...
    def clear(self) -> None: ...
    def popitem(self) -> tuple[K, P]: ...

    # inner
    def _swap(self, i: int, j: int) -> None: ...
    def _get_level(self, i: int) -> int: ...
    def _get_parent(self, i: int) -> int: ...
    def _get_grandparent(self, i: int) -> int: ...
    def _with_children(self, i: int) -> Iterable[int]: ...
    def _with_grandchildren(self, i: int) -> Iterable[int]: ...
    def _get_selector(self, level: int) -> Callable: ...
    def _push_down(self, i: int) -> None: ...
    def _push_up(self, i: int) -> None: ...
    def _get_max_index(self) -> int: ...
