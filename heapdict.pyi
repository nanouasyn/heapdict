from typing import (
    TypeVar,
    MutableMapping,
    overload,
    Iterable,
    Iterator,
    Mapping,
)

K = TypeVar("K")
P = TypeVar("P")

class HeapDict(MutableMapping[K, P]):
    _heap: list[tuple[K, P]]
    _keys: dict[K, int]
    _maxheap: bool

    @overload
    def __init__(self, *, maxheap=False, **kwargs: P) -> None: ...
    @overload
    def __init__(
        self, iterable: Iterable, /, *, maxheap=False, **kwargs
    ) -> None: ...
    @classmethod
    def fromkeys(
        cls, iterable: Iterable, value, maxheap=False
    ) -> HeapDict[K, P]: ...
    @property
    def maxheap(self) -> bool: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[K]: ...
    def __repr__(self) -> str: ...
    def __getitem__(self, key: K) -> P: ...
    def __setitem__(self, key: K, priority: P) -> None: ...
    def __delitem__(self, key: K) -> None: ...
    def __or__(self, other: Mapping[K, P]) -> HeapDict[K, P]: ...
    def __ror__(self, other: Mapping[K, P]) -> HeapDict[K, P]: ...
    def __copy__(self) -> HeapDict[K, P]: ...
    def copy(self) -> HeapDict[K, P]: ...
    def clear(self) -> None: ...
    def popitem(self) -> tuple[K, P]: ...
    def peekitem(self) -> tuple[K, P]: ...
    def _sift_down(self, i: int) -> None: ...
    def _sift_up(self, i: int) -> None: ...
    def _swap(self, i: int, j: int) -> None: ...
